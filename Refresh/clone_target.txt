#!/bin/ksh
######################################################################################################
#PROGRAM        : CLONE_TARGET
#
#Purpose        : Using Active Database Cloning, script will refresh Target database from Source
#                       
#
#Author         : Mruthunjay Belavatagi
#
#######################################################################################################
#######################################################################################################
 Chk_Ora_Err ()
 {
 ERR_CNT=`grep ORA- ${ORA_ERR_CHK}|wc -l`
 if [[ ${ERR_CNT} -ne 0 ]]
 then
     print "ERROR: During ${TASK_NAME} Check ${ORA_ERR_CHK} for more details" 
     exit 1
 fi
 cat /dev/null > ${ORA_ERR_CHK}
# TASK_NAME=""
 }
#######################################################################################################
#Db_Validity_Chk
#######################################################################################################
Db_Validity_Chk ()
{
  TASK_NAME="Target Database Validity"
  ps -ef|grep ${ORACLE_SID}|grep pmon
  STATUS=$?
  if [[ ${STATUS} -ne 0 ]]
  then
      print " Mentioned Target Database ${ORACLE_SID} not found on server `hostname`, provide Valid Database name to proceed with Refresh"          
      exit 1
  fi
}
#######################################################################################################
#Validate_Target
#######################################################################################################
Validate_Target ()
{
  TASK_NAME="Target Database Validity"
  print " Validating Database Name for Target"           
  if [[ `echo ${TRG_ORACLE_SID}|cut -c4-5` = "P1" || `echo ${TRG_ORACLE_SID}|cut -c6-7` = "PD" || `echo ${TRG_ORACLE_SID}|cut -c5-7` = "PRD" ]]
  then
      print " Target Database Cannot be ${TRG_ORACLE_SID}, please provide proper Target Database Name"  
      exit 1
  fi 
  print " DB Type Validation Check Passed"              
  print " "                                             
  Db_Validity_Chk
print "ORACLE_HOME for ${SID} is ${ORACLE_HOME}"
GET_DB_STATUS=`sqlplus -s " / as sysdba"<< EOF
set feedback off pause off pagesize 0 heading off verify off linesize 500 term off
select OPEN_MODE FROM V\\\$DATABASE
/
exit
/
EOF`
if [[ ${GET_DB_STATUS} != "READ WRITE" ]]
 then
     print "ERROR : Target SID Not in open state"
     exit 1
fi
  if [[ `echo ${ORACLE_SID}` = "${TRG_ORACLE_SID}" ]]
  then
      print " ORACLE HOME for ${ORACLE_SID} is ${ORACLE_HOME}"          
  fi 
  echo ${ORACLE_HOME}|grep ${ORACLE_SID}                                
  STATUS=$?
  if [[ ${STATUS} -ne 0 ]] then
  print " Proper ORACLE HOME Not Found for ${TRG_ORACLE_SID}"           
  exit 1
  fi
}
########################################################################################################
# Validate_Target_Tns
########################################################################################################
 Validate_Target_Tns ()
{
 TASK_NAME="Validate_Target_Tns"
sqlplus -s sys/*******${TARGET_TNS} as sysdba<<EOF >${ORA_ERR_CHK}
select name from v\$database
/
exit
EOF
 Chk_Ora_Err
 print " "                                              
 print " Target TNS Connection Check passed"            
TRG_DB_NAME=`sqlplus -s sys/corio123@${TARGET_TNS} as sysdba<< EOF
set feedback off pause off pagesize 0 heading off verify off linesize 500 term off
select name from v\\\$database
/
exit
/
EOF`
 if [[ ${TRG_DB_NAME} != ${TRG_ORACLE_SID} ]]
 then
     print " Target Database Name Mismatch during TNS Validation"       
     exit 1
 fi 
 print " Target Database Name ${TRG_ORACLE_SID} Validation Completed"   
} 
########################################################################################################
# Validate_Source
########################################################################################################
Validate_Source ()
{
 TASK_NAME="Source Validation"
 print ""                                               
 ps -ef|grep pmon|grep ${SOURCE_DB}
 STATUS=$?
 if [[ ${STATUS} -eq 0 ]] then
 print ""                                               
 print "ERROR: Source and Target Database found on the same server `hostname`, cannot proceed further with refresh"     
 exit 1
 fi
} 
########################################################################################################
# Validate_Source_Tns
########################################################################################################
 Validate_Source_Tns ()
{
 TASK_NAME="Validate_Source_Tns"
sqlplus -s sys/corio123@${SOURCE_TNS} as sysdba<<EOF >${ORA_ERR_CHK}
select name from v\$database
/
exit
EOF
 Chk_Ora_Err
 print " "                                              
 print " Source TNS Connection Check passed"            
SRC_DB_NAME=`sqlplus -s sys/corio123@${SOURCE_TNS} as sysdba<< EOF
set feedback off pause off pagesize 0 heading off verify off linesize 500 term off
select name from v\\\$database
/
exit
/
EOF`
 if [[ ${SRC_DB_NAME} != ${SOURCE_DB} ]]
 then
     print " Source Database Name Mismatch during TNS Validation"       
     exit 1
 fi
 print " Source Database Name ${SOURCE_DB} Validation Completed"        
}
########################################################################################################
#Get_Target_Temp
########################################################################################################
 Get_Target_Temp ()
 {
 TASK_NAME="Get_Target_Temp"
 TARGET_TEMP_LIST=${CUR_REF_DIR}/${TRG_ORACLE_SID}_temp.lst
 TARGET_TEMP_NONDEF=${CUR_REF_DIR}/${TRG_ORACLE_SID}_nondef_tmp.lst
GET_DEF_TEMP=`sqlplus -s " / as sysdba"<< EOF
set feedback off pause off pagesize 0 heading off verify off linesize 500 term off
select PROPERTY_VALUE from database_properties where property_name like 'DEFAULT_TEMP_TABLESPACE' 
/
exit
/
EOF`
 print " "                                                                      
 print "Default Temp Tablespace for ${TRG_ORACLE_SID} is ${GET_DEF_TEMP}"       
 print "Below Temporary Tablespace exists in ${TRG_ORACLE_SID} before refresh"  
sqlplus -s " / as sysdba"<< EOF > ${TARGET_TEMP_LIST}
set feedback off pause off pagesize 0 heading off verify off linesize 500 term off
select distinct tablespace_name from dba_temp_files order by tablespace_name
/
exit
/
EOF
 cp -p ${TARGET_TEMP_LIST} ${ORA_ERR_CHK}
 Chk_Ora_Err
 cat ${TARGET_TEMP_LIST} 
GET_TMP_MNT=`sqlplus -s " / as sysdba"<< EOF
set feedback off pause off pagesize 0 heading off verify off linesize 500 term off
select distinct(substr(file_name,1,25))"mount point" from dba_temp_files where rownum=1 
/
exit;
EOF`
} 
########################################################################################################
#Active_Clone
#
########################################################################################################
Active_Clone ()
{
TASK_NAME="Active Cloning"
print " "                                                                       
print " Shutting Down Target Database ${TRG_ORACLE_SID}"                        
sqlplus -s " / as sysdba"<< EOF > ${ORA_ERR_CHK}
SELECT NAME from v\$database
/
SHUT IMMEDIATE;
STARTUP NOMOUNT;
exit
/
EOF
 Chk_Ora_Err
print " "                                                                       
print " Active Cloning Starting at `date` "                                     
$ORACLE_HOME/bin/rman target sys/corio123@${SOURCE_TNS} auxiliary sys/corio123@${TARGET_TNS} msglog ${ACTIVE_CLONELOG} << EOF

run
{
allocate auxiliary channel br1 type disk;
allocate auxiliary channel br2 type disk;
allocate auxiliary channel br3 type disk;
allocate auxiliary channel br4 type disk;
allocate channel br5 type disk;
allocate channel br6 type disk;
allocate channel br7 type disk;
allocate channel br8 type disk;
DUPLICATE TARGET DATABASE TO '${TRG_ORACLE_SID}' FROM ACTIVE DATABASE NOFILENAMECHECK;  
release channel br1;
release channel br2;
release channel br3;
release channel br4;
release channel br5;
release channel br6;
release channel br7;
release channel br8;
}
exit;
EOF
print " Active Cloning completed at `date`"                                     
}
########################################################################################################
#Recreate_Target_Temp
########################################################################################################
Recreate_Target_Temp ()
{

 TARGET_TEMP_RCRT=${CUR_REF_DIR}/${TRG_ORACLE_SID}_recreate_temp.log
 TASK_NAME="RECREATE_TARGET_TEMP"
 TARGET_TEMP_TODELETE=${CUR_REF_DIR}/${TRG_ORACLE_SID}_deletetemp_fromprod.txt
 TARGET_TEMP_TODELETELOG=${CUR_REF_DIR}/${TRG_ORACLE_SID}_deletetemp_fromprod.log
 print " "                                                                      
 print "Tempfile will be created under ${GET_TMP_MNT}"                          
 cat /dev/null > ${TARGET_TEMP_RCRT}
GET_DB_STATUS=`sqlplus -s " / as sysdba"<< EOF
set feedback off pause off pagesize 0 heading off verify off linesize 500 term off
select OPEN_MODE FROM V\\\$DATABASE
/
exit
/
EOF`
 if [[ ${GET_DB_STATUS} == "READ WRITE" ]]
 then 
sqlplus -s " / as sysdba"<< EOF > ${TARGET_TEMP_TODELETE}
set feedback off pause off pagesize 0 heading off verify off linesize 500 term off
select distinct tablespace_name from dba_temp_files order by tablespace_name
/
exit
/
EOF
 cp -p ${TARGET_TEMP_TODELETE} ${ORA_ERR_CHK}
 Chk_Ora_Err
 print " "                                                                      
 print "Below list of Temporary tablespaces to be deleted after Active Cloning in ${TRG_ORACLE_SID}"    
 cat ${TARGET_TEMP_TODELETE}    
 print "Creating temporary tablespace ${ORACLE_SID}_REFRESH_TEMP in ${TRG_ORACLE_SID}"                  
sqlplus -s " / as sysdba"<< EOF > ${ORA_ERR_CHK}
create temporary tablespace ${ORACLE_SID}_REFRESH_TEMP tempfile '${GET_TMP_MNT}/${ORACLE_SID}_REFRESH_TEMP.dbf' size 10M reuse
/
ALTER DATABASE DEFAULT TEMPORARY TABLESPACE ${ORACLE_SID}_REFRESH_TEMP
/
exit
/
EOF
 cat ${ORA_ERR_CHK}             
 Chk_Ora_Err
 print " "                                                                      
 for ts in `cat ${TARGET_TEMP_TODELETE}`
 do
 print "Dropping Temporary Tablespace ${ts} from ${TRG_ORACLE_SID}"             
sqlplus -s " / as sysdba"<< EOF >> ${TARGET_TEMP_TODELETELOG}
select name from v\$database
/
 DROP TABLESPACE ${ts} INCLUDING CONTENTS AND DATAFILES
/
exit;
EOF
 done
 cp -p ${TARGET_TEMP_TODELETELOG} ${ORA_ERR_CHK}
 Chk_Ora_Err
 cat ${TARGET_TEMP_TODELETELOG} 
 rm ${TARGET_TEMP_TODELETELOG}
 for ts in `cat ${TARGET_TEMP_LIST}`
 do
 print "Creating Temporary Tablespace ${ts} in ${TRG_ORACLE_SID}"               
sqlplus -s " / as sysdba"<< EOF >> ${TARGET_TEMP_RCRT}
select name from v\$database
/
 create temporary tablespace ${ts} tempfile '${GET_TMP_MNT}/${ORACLE_SID}_${ts}_Rfr_temp.dbf' size 10M reuse
/
exit;
EOF
 done
 cp -p ${TARGET_TEMP_RCRT} ${ORA_ERR_CHK}
 Chk_Ora_Err 
 cat ${TARGET_TEMP_RCRT} 
 rm ${TARGET_TEMP_RCRT}
 print "Changing Default Temporary Tablespace as ${GET_DEF_TEMP} in ${TRG_ORACLE_SID}"  
 print "and dropping temporary tablespace ${ORACLE_SID}_REFRESH_TEMP"                   
sqlplus -s " / as sysdba"<< EOF >> ${TARGET_TEMP_RCRT}
select name from v\$database
/
ALTER DATABASE DEFAULT TEMPORARY TABLESPACE ${GET_DEF_TEMP}
/
DROP TABLESPACE ${ORACLE_SID}_REFRESH_TEMP INCLUDING CONTENTS AND DATAFILES
/
exit;
EOF
 cp -p ${TARGET_TEMP_RCRT} ${ORA_ERR_CHK}
 Chk_Ora_Err
 cat ${TARGET_TEMP_RCRT} 
 rm ${TARGET_TEMP_RCRT}
 print " "                                                                      
 print "End of Refresh ${TRG_ORACLE_SID} from ${SOURCE_DB}"                     
 else
 print "Database Not opened Cannot Recreate Temporaray tablespace"              
 exit 1
 fi
}
######################################################################################################
#MAIN
########################################################################################################
  PROGRAM_NAME=$0
  if [ $# != 4 ]
  then
      USAGE="USAGE: ${PROGRAM_NAME} SRC=<SOURCE DB NAME> TRG=<TARGET DB NAME> SRC_TNS=<SOURCE TNS> TRG_TNS=<TARGET TNS>"
      print ${USAGE}
      print ' '
      exit 1
  fi
 SRC_STRING=`echo $1|awk -F'=' '{print $1}'`
 if [[ "${SRC_STRING}" -ne "SRC" || "${SRC_STRING}" -ne "src" || "${SRC_STRING}" -ne "Src" ]]
 then
     print "    "          
     print " ERROR : Invalid Argument Flag Specified for Source"
     exit 1
  fi 
 TRG_STRING=`echo $2|awk -F'=' '{print $1}'`
 if [[ "${TRG_STRING}" -ne "TRG" || "${TRG_STRING}" -ne "trg" || "${TRG_STRING}" -ne "Trg" ]]
 then
     print "    "
     print " ERROR : Invalid Argument Flag Specified for Target"
     exit 1
  fi
 SRC_TNS_TRING=`echo $3|awk -F'=' '{print $1}'`
 if [[ "${SRC_TNS_TRING}" -ne "SRC_TNS" || "${SRC_TNS_TRING}" -ne "src_tns" || "${SRC_TNS_TRING}" -ne "Src_Tns" || "${SRC_TNS_TRING}" -ne "Src_tns" ]]
 then
     print "    "
     print " ERROR : Invalid Argument Flag Specified for Source TNS"
     exit 1
  fi
 TRG_TNS_STRING=`echo $4|awk -F'=' '{print $1}'`
 if [[ "${TRG_TNS_STRING}" -ne "TRG_TNS" || "${TRG_TNS_STRING}" -ne "trg_tns" || "${TRG_TNS_STRING}" -ne "Trg_Tns" || "${TRG_TNS_STRING}" -ne "Trg_tns" ]]
 then
     print "    "
     print " ERROR : Invalid Argument Flag Specified for Target TNS"
     exit 1
 fi
 SOURCE_DB=`echo $1|awk -F'=' '{print $2}'` 
 TRG_ORACLE_SID=`echo $2|awk -F'=' '{print $2}'`
 if [[ ${SOURCE_DB} == ${TRG_ORACLE_SID} ]]
 then
     print "    "
     print " ERROR : Source and Target Database cannot be same"
     exit 1
 fi
 print "Refresh for ${TRG_ORACLE_SID} started at `date`"
 print " Specified Source Database is ${SOURCE_DB}"             
 print " Specified Target Database is ${TRG_ORACLE_SID}"        
 print " "                                                      
 ORACLE_SID=${TRG_ORACLE_SID}

 Validate_Target
 
 SOURCE_TNS=`echo $3|awk -F'=' '{print $2}'`
 TARGET_TNS=`echo $4|awk -F'=' '{print $2}'`
 print " "                                                      
 print " Specified TNS for Source Database is ${SOURCE_TNS}"    
 print " Specified TNS for Target Database is ${TARGET_TNS}"    

 ORA_ERR_CHK=${CUR_REF_DIR}/Check_Ora_Error_Refresh.log
# Validate_Source
 Validate_Target_Tns
 
 Validate_Source_Tns

 Get_Target_Temp
 Active_Clone
 Recreate_Target_Temp
 rm ${ORA_ERR_CHK}
 print " "                                                      
 print "ACTIVE CLONE FOR ${ORACLE_SID} COMPLETED at `date` "     

