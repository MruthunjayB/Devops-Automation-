#!/bin/ksh
################################################################################################
#PROGRAM        : post_refresh
#
#Purpose        : Performs the post-refresh tasks for the Target ORACLE_SID which is under Refresh
#                       
#
#Author         : Mruthunjay Belavatagi
#
################################################################################################
############################################################################################
############################################################################################
#Chk_Ora_Err
#
#############################################################################################
Chk_Ora_Err ()
{
  ERR_CNT=`grep ORA- ${ORA_ERR_CHK}|wc -l`
  if [[ ${ERR_CNT} -ne 0 ]]
  then
      print "ERROR: During ${TASK_NAME} Check ${ORA_ERR_CHK} for more details"
      exit 1
  fi
  cat /dev/null > ${ORA_ERR_CHK}
}
#############################################################################################
#Post_Ref_Tasks
#
#############################################################################################
Post_Ref_Tasks ()
{

 print " " 
 print "Post Refresh Tasks starting on `date`"
 print " "
 print "Checking Existence of Create tempfile sql file"         
 ls -ltr ${CUR_REF_DIR}/run_${ORACLE_SID}_cre_tempfiles.sql 
 STATUS=$?
 if [[ ${STATUS} -ne 0 ]]
 then
     print "File run_${ORACLE_SID}_cre_tempfiles.sql not found in ${CUR_REF_DIR}" 
     exit 1
 else
     print "File run_${ORACLE_SID}_cre_tempfiles.sql exists Creating Temp file for ${ORACLE_SID}"
     print "Running run_${ORACLE_SID}_cre_tempfiles.sql " > ${POST_MAIN_SQL_LOG}
sqlplus -s " / as sysdba" <<EOF >>${POST_MAIN_SQL_LOG}
select name,open_mode,log_mode from v\$database
/
@${CUR_REF_DIR}/run_${ORACLE_SID}_cre_tempfiles.sql
exit
EOF
 fi

 print " "
 print "Checking Existence of reset_user_to_default_profile.sql file"
 ls -ltr ${CUR_REF_DIR}/reset_user_to_default_profile.sql
 STATUS=$?
 if [[ ${STATUS} -ne 0 ]]
 then
     print "File reset_user_to_default_profile.sql not found in ${CUR_REF_DIR}"
     exit 1
 else
     print "File reset_user_to_default_profile.sql exists"
     print "Running reset_user_to_default_profile.sql" >> ${POST_MAIN_SQL_LOG}
sqlplus -s " / as sysdba" <<EOF >>${POST_MAIN_SQL_LOG}
@${CUR_REF_DIR}/reset_user_to_default_profile.sql
exit
EOF
 fi

 print " "
 print "Checking Existence of run_${ORACLE_SID}_restore_user_passwds.sql file"
 ls -ltr ${CUR_REF_DIR}/run_${ORACLE_SID}_restore_user_passwds.sql
 STATUS=$?
 if [[ ${STATUS} -ne 0 ]]
 then
     print "File run_${ORACLE_SID}_restore_user_passwds.sql not found in ${CUR_REF_DIR}"
     exit 1
 else
     print "File run_${ORACLE_SID}_restore_user_passwds.sql exists"
     print "Running run_${ORACLE_SID}_restore_user_passwds.sql" >> ${POST_MAIN_SQL_LOG}
sqlplus -s " / as sysdba" <<EOF >>${POST_MAIN_SQL_LOG}
@${CUR_REF_DIR}/run_${ORACLE_SID}_restore_user_passwds.sql
exit
EOF
 fi 
 print "Rerunning reset_user_to_default_profile.sql "
sqlplus -s " / as sysdba" <<EOF >>${POST_MAIN_SQL_LOG}
@${CUR_REF_DIR}/reset_user_to_default_profile.sql
exit
EOF

 print " "
 print "Checking Existence of run_${ORACLE_SID}_restore_user_roles.sql file"
 ls -ltr ${CUR_REF_DIR}/run_${ORACLE_SID}_restore_user_roles.sql
 STATUS=$?
 if [[ ${STATUS} -ne 0 ]]
 then
     print "File run_${ORACLE_SID}_restore_user_roles.sql not found in ${CUR_REF_DIR}"
     exit 1
 else
     print "File run_${ORACLE_SID}_restore_user_roles.sql exists"
         print "Running run_${ORACLE_SID}_restore_user_roles.sql " >>${POST_MAIN_SQL_LOG}
sqlplus -s " / as sysdba" <<EOF >>${POST_MAIN_SQL_LOG}
@${CUR_REF_DIR}/run_${ORACLE_SID}_restore_user_roles.sql
exit
EOF
 fi
  
  print " "
 print "Checking Existence of run_${ORACLE_SID}_UPDATE_psdbowner.sql file"
 ls -ltr ${CUR_REF_DIR}/run_${ORACLE_SID}_UPDATE_psdbowner.sql
 STATUS=$?
 if [[ ${STATUS} -ne 0 ]]
 then
     print "File run_${ORACLE_SID}_UPDATE_psdbowner.sql not found in ${CUR_REF_DIR}"
     exit 1
 else
     print "File run_${ORACLE_SID}_UPDATE_psdbowner.sql exists"
         print "Running run_${ORACLE_SID}_UPDATE_psdbowner.sql" >>${POST_MAIN_SQL_LOG}
sqlplus -s " / as sysdba" <<EOF >>${POST_MAIN_SQL_LOG}
@${CUR_REF_DIR}/run_${ORACLE_SID}_UPDATE_psdbowner.sql
commit;
exit
EOF
 fi
 
  print " "
 print "Checking Existence of run_${ORACLE_SID}_objects_priv.sql file"
 ls -ltr ${CUR_REF_DIR}/run_${ORACLE_SID}_objects_priv.sql
 STATUS=$?
 if [[ ${STATUS} -ne 0 ]]
 then
     print "File run_${ORACLE_SID}_objects_priv.sql not found in ${CUR_REF_DIR}"
     exit 1
 else
     print "File run_${ORACLE_SID}_objects_priv.sql exists"
         print "Running run_${ORACLE_SID}_objects_priv.sql" >>${POST_MAIN_SQL_LOG}
sqlplus -s " / as sysdba" <<EOF >>${POST_MAIN_SQL_LOG}
@${CUR_REF_DIR}/run_${ORACLE_SID}_objects_priv.sql
exit
EOF
 fi 
 
  print " "
 print "Checking Existence of run_${ORACLE_SID}_cre_sysnoym.sql file"
 ls -ltr ${CUR_REF_DIR}/run_${ORACLE_SID}_cre_sysnoym.sql
 STATUS=$?
 if [[ ${STATUS} -ne 0 ]]
 then
     print "File run_${ORACLE_SID}_cre_sysnoym.sql not found in ${CUR_REF_DIR}"
     exit 1
 else
     print "File run_${ORACLE_SID}_cre_sysnoym.sql exists"
     print "Running Create Synonym Script for ${ORACLE_SID}" >>${POST_MAIN_SQL_LOG}
sqlplus -s " / as sysdba" <<EOF
@${CUR_REF_DIR}/run_${ORACLE_SID}_cre_sysnoym.sql
exit
EOF
      print " End of Create Synonyms script "
          print " End of Create Synonyms script " >>${POST_MAIN_SQL_LOG}
 fi
 
  print " "
 print "Checking Existence of system_privs_to_user.sql file"
 ls -ltr ${CUR_REF_DIR}/system_privs_to_user.sql
 STATUS=$?
 if [[ ${STATUS} -ne 0 ]]
 then
     print "File system_privs_to_user.sql not found in ${CUR_REF_DIR}"
     exit 1
 else
     print "File system_privs_to_user.sql exists"
         print "Running system_privs_to_user.sql " >> ${POST_MAIN_SQL_LOG}
sqlplus -s " / as sysdba" <<EOF >>${POST_MAIN_SQL_LOG}
@${CUR_REF_DIR}/system_privs_to_user.sql
exit
EOF
 fi
 
  print " "
 print "Checking Existence of system_privs_to_role.sql file"
 ls -ltr ${CUR_REF_DIR}/system_privs_to_role.sql
 STATUS=$?
 if [[ ${STATUS} -ne 0 ]]
 then
     print "File system_privs_to_role.sql not found in ${CUR_REF_DIR}"
     exit 1
 else
     print "File system_privs_to_role.sql exists"
     print "Running system_privs_to_role.sql " >>${POST_MAIN_SQL_LOG}
sqlplus -s " / as sysdba" <<EOF >>${POST_MAIN_SQL_LOG}
@${CUR_REF_DIR}/system_privs_to_role.sql
exit
EOF
 fi

   print " "
 print "Checking Existence of grant_roles.sql file"
 ls -ltr ${CUR_REF_DIR}/grant_roles.sql
 STATUS=$?
 if [[ ${STATUS} -ne 0 ]]
 then
     print "File grant_roles.sql not found in ${CUR_REF_DIR}"
     exit 1
 else
     print "File grant_roles.sql exists"
     print "Running grant_roles.sql " >>${POST_MAIN_SQL_LOG}
sqlplus -s " / as sysdba" <<EOF >>${POST_MAIN_SQL_LOG}
@${CUR_REF_DIR}/grant_roles.sql
exit
EOF
 fi
}
#############################################################################################
# Import_Tables
#
#############################################################################################
Import_Tables ()
{
  ORA_ERR_CHK=${CUR_REF_DIR}/Check_Ora_Error_post.log
  TASK_NAME=TABLE_IMPDP
sqlplus -s "/ as sysdba"<< EOF > ${ORA_ERR_CHK}
CREATE OR REPLACE DIRECTORY ${ORACLE_SID}_${TODAY} as '${CUR_REF_DIR}'
 /
EXIT;
EOF
  Chk_Ora_Err
  print "${TASK_NAME} starting at `date`"
  PARFILE=impdp_${ORACLE_SID}.par
  print "userid=\"/ as sysdba\""                                            >  ${PARFILE}
  print "directory=${ORACLE_SID}_${TODAY}"                                  >> ${PARFILE}
  print "dumpfile=EXPDP_${ORACLE_SID}.dmp"                                  >> ${PARFILE}
  print "logfile=IMPDP_${ORACLE_SID}.log"                                   >> ${PARFILE}
  print "TABLES=("                                                                                                                      >> ${PARFILE}
  LINE_COUNT=`sed '/^$/d' ${IMPORT_FLAG}|wc -l`
  COUNT_LINES=1
  for TAB in `cat ${IMPORT_FLAG}`
  do
    if [[ "${COUNT_LINES}" -eq "${LINE_COUNT}" ]]
    then
        print ${TAB}                                                        >> ${PARFILE}
    else
        echo ${TAB}|sed 's/$/,/'                                            >> ${PARFILE}
    fi
  ((COUNT_LINES=COUNT_LINES+1))
  done
  print ")"                                                                 >> ${PARFILE}
  print "table_exists_action=replace"                                       >> ${PARFILE}
  ${ORACLE_HOME}/bin/impdp parfile=${PARFILE}
  grep "successfully completed" IMPDP_${ORACLE_SID}.log
  STATUS=$?
  if [[ ${STATUS} -ne 0 ]]
  then
      print "ERROR: During Table Import Check IMPDP_${ORACLE_SID}.log for more details "
      exit 1
  fi
  print "${TASK_NAME} Ending at `date`"
  print "                             "
}
#############################################################################################
# Chk_Db_Ver
#
#############################################################################################
Chk_Db_Ver ()
{
DB_VERSION=`sqlplus -s "/ as sysdba"<< EOF
set feedback off pause off pagesize 0 heading off verify off linesize 500 term off
select version from v\\\$instance
/
exit
/
EOF`
  DB_VER=`echo ${DB_VERSION}|awk -F'.' '{print $1}'`
  if [[ ${DB_VER} -eq 9 ]]
  then
      print "Since the database base Version is 9i release, proceed with manual import steps and post checks"
      print "                                                                               "
      exit
  elif [[ ${DB_VER} -ge 10 ]]
  then
      print "Since the database base version is 10g or higher, Datapump Import would be performed"
      print "                                                                               "
      Import_Tables
  else
      print "Could Not Get Version of the databse ${ORACLE_SID}"
      exit
  fi
}
#############################################################################################
#Db_Validity_Chk
#
#############################################################################################

Db_Validity_Chk ()
{
  print " "
  print "Checking the existense of ${ORACLE_SID} on Server `hostname`"  
  ps -ef|grep ${ORACLE_SID}|grep pmon
  STATUS=$?
  if [[ ${STATUS} -ne 0 ]]
  then
      print " Mentioned Database ${ORACLE_SID} not found, provide Valid Database name to proceed with post refresh"
      exit 1
  else
      print "Database ${ORACLE_SID} found on the server `hostname`"
  fi
}

#############################################################################################
#Main
#
#############################################################################################
PROGRAM_NAME=$0
  if [ $# != 3 ]
  then
      USAGE="USAGE: ${PROGRAM_NAME} <TARGET_ORACLE_SID> <POST=YES/NO> IMPORT=<IMPORT_TABLE_LIST>/NO"
      print ${USAGE}
      print ' '
      exit 1
  fi
  CUR_REF_DIR=`pwd`
  ORACLE_SID=$1
  TODAY=`date +%Y%m%d_%H%M`
  POST_MAIN_SQL_LOG=${CUR_REF_DIR}/Post_${ORACLE_SID}_sqlop_${TODAY}.log
  Db_Validity_Chk
    GET_DB_HOME=`dbhome ${ORACLE_SID}`
  if [ -z "${GET_DB_HOME}" ]
  then
      print "Could Not Get ORACLE_HOME for ${ORACLE_SID}"
      exit 1
  fi
  PATH=${GET_DB_HOME}/bin:$PATH
  ORACLE_HOME=${GET_DB_HOME}
  POST_CHECK=$2
  POST_STRING=`echo ${POST_CHECK}|awk -F'=' '{print $1}`
  POST_FLAG=`echo ${POST_CHECK}|awk -F'=' '{print $2}`
  if [[ $POST_STRING == "POST" || $POST_STRING == "post" || $POST_STRING == "Post" ]]
  then 
      if [[ ${POST_FLAG} == "YES" || ${POST_FLAG} == "yes" || ${POST_FLAG} == "Yes" ]]
      then
          print "    " 
          print "Specified flag for Post Refresh is ${POST_FLAG}, hence Post Refresh steps will be performed"
          print "Argument Check Passed for Post Steps"
      elif [[ ${POST_FLAG} == "NO" || ${POST_FLAG} == "no" || ${POST_FLAG} == "No" ]]
      then
          print "    "
          print "Specified flag for Post Refresh is ${POST_FLAG}, hence Post Refresh steps will not be performed"
          print "Argument Check Passed for Post Steps"
      else
          print "    "          
          print "ERROR : Invalid Argument Specified for Post Steps"
      exit 1 
      fi
  else 
      print "Invalid Argument Specified for Post String"
      exit 1
  fi
  IMPORT_CHECK=$3
  IMPORT_STRING=`echo ${IMPORT_CHECK}|awk -F'=' '{print $1}`
  IMPORT_FLAG=`echo ${IMPORT_CHECK}|awk -F'=' '{print $2}`
  if [[ $IMPORT_STRING == "IMPORT" || $IMPORT_STRING == "import" || $IMPORT_STRING == "Import" ]]
  then 
      if [[ ${IMPORT_FLAG} == "NO" || ${IMPORT_FLAG} == "no" || ${IMPORT_FLAG} == "No" ]]
    then
        print "    "
        print "Specified flag for IMPORT Refresh is ${IMPORT_FLAG}, hence IMPORT will not be performed"
        print "Argument Check Passed for IMPORT"
    else 
        print "    "
        print "Checking the File mentioned to Import"
        ls -ltr ${CUR_REF_DIR}/${IMPORT_FLAG}
        STATUS=$?
        if [[ ${STATUS} -ne 0 ]]
        then
            print "    "
            print " ERROR: Import file ${IMPORT_FLAG} not found, provide Valid filename to proceed with post refresh"
            exit 1
        fi
            if [[ -s ${IMPORT_FLAG} ]]
        then
            print "    " 
            print "Provided Arguments have been Validated"
        else
            print "    "
            print " ERROR: ${IMPORT_FLAG} file is empty, please enter valid Table Names to proceed with post refresh "
            exit 1
        fi
    fi
  else 
      print "    "
      print "ERROR: Invalid Argument Specified for IMPORT String"
      exit 1
  fi
  if [[ $POST_STRING == "POST" || $POST_STRING == "post" || $POST_STRING == "Post" ]]
  then
      if [[ ${POST_FLAG} == "YES" || ${POST_FLAG} == "yes" || ${POST_FLAG} == "Yes" ]]
      then
          Post_Ref_Tasks
      fi
  fi
  if [[ $IMPORT_STRING == "IMPORT" || $IMPORT_STRING == "import" || $IMPORT_STRING == "Import" ]]
  then
      if [[ ${IMPORT_FLAG} == "NO" || ${IMPORT_FLAG} == "no" || ${IMPORT_FLAG} == "No" ]]
      then
          print "    "
      else
          print "    "
          Chk_Db_Ver 
      fi
  fi

  print "                                "
  print "COMPLETED: ${PROGRAM_NAME} for ${ORACLE_SID} at `date`"
